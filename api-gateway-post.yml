AWSTemplateFormatVersion: '2010-09-09'
Description: 'My API Gateway and Lambda function'

Parameters:
  apiGatewayStageName:
    Type: 'String'
    AllowedPattern: '^[a-z0-9]+$'
    Default: 'test'

Resources:
  apiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'my-api'
      Description: 'My API'

  apiGatewayRootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt 'lambdaFunction.Arn'
      ResourceId: !GetAtt 'apiGateway.RootResourceId'
      RestApiId: !Ref 'apiGateway'

  apiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - 'apiGatewayRootMethod'
    Properties:
      RestApiId: !Ref 'apiGateway'
      StageName: !Ref 'apiGatewayStageName'

  lambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            const ip = event.requestContext.identity.sourceIp;
            const response = {
              body: `Hello there ${ip}`,
              headers: {
                'Content-Type': 'text/plain'
              },
              statusCode: 200
            };
            callback(null, response);
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'lambdaIAMRole.Arn'
      Runtime: nodejs8.10
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'lambdaFunction.Arn'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/'

  lambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub 'https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}'

  lambdaArn:
    Value: !GetAtt 'lambdaFunction.Arn'
